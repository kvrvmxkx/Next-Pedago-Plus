generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(cuid()) @map("_id")
  name          String
  email         String  @unique
  emailVerified Boolean @default(false)
  image         String?
  subscription  String?
  role          String  @default("user")
  banned        Boolean @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  courses  Course[]
}

model Account {
  id                       String  @id @default(cuid()) @map("_id")
  userId                   String
  accountId                String
  providerId               String
  type                     String?
  provider                 String?
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String    @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Course {
  id     String @id @default(cuid()) @map("_id")
  userId String
  author User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
